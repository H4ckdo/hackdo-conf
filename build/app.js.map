{"version":3,"sources":["../app.jsx"],"names":[],"mappings":";;;;;;;;;;;;AAAA,IAAM,UAAU,QAAQ,SAAR,CAAhB;AACA,IAAM,OAAO,QAAQ,MAAR,CAAb;;eACiB,QAAQ,eAAR,C;IAAT,I,YAAA,I;;WACyB,QAAQ,GAAR,CAAY,QAAZ,KAAyB,YAAzB,GAAwC,sCAAxC,GAA8E,uC;IAAvG,I,QAAA,I;IAAM,I,QAAA,I;IAAM,Q,QAAA,Q;;AACpB,IAAM,kBAAkB,+BAAxB;;gBAC4B,4B;IAApB,e,aAAA,e;;AACR,IAAI,QAAQ,QAAQ,OAAR,CAAZ;AACA,IAAM,KAAK,QAAQ,IAAR,CAAX;;AAEA;;;;AAIA,IAAM;AAAA,uFAAY;AAAA;AAAA;AAAA;AAAA;AAAA;AAChB;AACM,kBAFU,GAED,8BAFC;AAGV,uBAHU,GAGI,yCAHJ;AAIV,4BAJU,GAIS,kCAJT;AAKZ,eALY,GAKN,SALM;;AAMhB,kBAAM,YAAN,CAAmB;AACjB,mBAAK,GAAG,YAAH,CAAgB,eAAhB,CADY;AAEjB,oBAAM,GAAG,YAAH,CAAgB,cAAhB;AAFW,aAAnB,EAGG,EAHH,CAGM,GAHN,EAGW,UAAC,GAAD,EAAM,GAAN,EAAc;AACvB,kBAAI,KAAJ,CAAU,IAAV;AACA,kBAAI,IAAJ;AACD,aAND,EAMG,MANH,CAMU,IANV;;AANgB;AAAA,mBAcc,YAAY,GAAZ,CAdd;;AAAA;AAcZ,6BAdY;;AAAA,iBAeZ,gBAfY;AAAA;AAAA;AAAA;;AAAA,iBAgBV,kBAAkB,EAhBR;AAAA;AAAA;AAAA;;AAiBZ,gBAAI,GAAJ,CAAQ,QAAQ,MAAR,CAAe,iBAAf,CAAR;AACA,gBAAI,MAAJ,CAAW,MAAX,EAAmB,QAAQ,KAAR,EAAe,UAAlC;AACA,gBAAI,GAAJ,CAAQ,aAAR,EAAuB,MAAvB;AACA,gBAAI,GAAJ,CAAQ,OAAR,EAAiB,KAAK,OAAL,CAAa,SAAb,EAAwB,UAAxB,CAAjB;AApBY;AAAA,mBAqBa,OAAO,GAAP,CArBb;;AAAA;AAqBR,wBArBQ;AAqByB;AACrC;AACA,gBAAI,aAAa,EAAjB,EAAqB;AACnB,kBAAI,MAAJ,CAAW,IAAX,EAAiB;AAAA,uBAAM,QAAQ,GAAR,CAAY,iBAAZ,EAAkC,IAAlC,SAA0C,IAA1C,CAAN;AAAA,eAAjB,EADmB,CACsD;AAC1E,aAFD,MAEO;AACL,4BAAc,aAAa,KAA3B,EADK,CAC6B;AACnC;AA3BW;AAAA;;AAAA;AA6BZ,0BAAc,kBAAkB,KAAhC,EA7BY,CA6B2B;;AA7B3B;AAAA;AAAA;;AAAA;AAgCd,0BAAc,iBAAiB,KAA/B,EAhCc,CAgCwB;;AAhCxB;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,GAAZ;;AAAA;AAAA;AAAA;AAAA,GAAN;;AAoCA,IAAM,gBAAgB,SAAhB,aAAgB,CAAC,KAAD,EAAW;AAC/B,UAAQ,GAAR,CAAY,8BAAZ,EAA4C,KAA5C;AACD,CAFD;;AAIA,kBACG,IADH,CACQ,SADR,EAEG,KAFH,CAES,aAFT","file":"app.js","sourcesContent":["const express = require('express');\nconst path = require('path');\nconst { exec } = require('child_process');\nconst { PORT, HOST, FIXTURES } = process.env.NODE_ENV === \"production\" ? require('config/env/production.js') : require('config/env/development.js');\nconst setDependencies = require('config/globals.js');\nconst { installFixtures } = require('utils/index.js');\nvar https = require('https')\nconst fs = require('fs');\n\n/**\n * @function bootstrap\n * @return {type} {bootstrap the connection and routes}\n */\nconst bootstrap = async () => {\n  require('config/logger.js');\n  const routes = require('config/routes.js');\n  const middlewares = require('config/middlewares/index.js');\n  const connectionResult = require('config/connection.js');\n  let app = express();\n  https.createServer({\n    key: fs.readFileSync('./private.pem'),\n    cert: fs.readFileSync('./public.pem')\n  }).on('/', (req, res) => {\n    res.write(\"ok\");\n    res.send();\n  }).listen(5000)\n\n  let middlewaresResult = await middlewares(app);\n  if (connectionResult) {\n    if (middlewaresResult.ok) {\n      app.use(express.static('./client/public'));\n      app.engine('html', require('ejs').renderFile);\n      app.set('view engine', 'html');\n      app.set('views', path.resolve(__dirname, '../views'));\n      let routesLoades = await routes(app);//define routes\n      //debugger;\n      if (routesLoades.ok) {\n        app.listen(PORT, () => console.log(\"App listen on: \", `${HOST}:${PORT}`))//lift the server\n      } else {\n        errorStarting(routesLoades.error);//log the error\n      }\n    } else {\n      errorStarting(middlewaresResult.error);//log the error\n    }\n  } else {\n    errorStarting(connectionResult.error);//log the error\n  }\n}\n\nconst errorStarting = (error) => {\n  console.log('Unable to bootstrap the app ', error);\n}\n\nsetDependencies()\n  .then(bootstrap)\n  .catch(errorStarting)\n"]}